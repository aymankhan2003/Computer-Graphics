class Model{constructor(a,c){this.center=vec3.fromValues(0,0,0);this.color=c;for(var d=0;d<a.vertices.length/3;++d)for(var b=0;3>b;++b)this.center[b]+=a.vertices[3*d+b];for(d=0;3>d;++d)this.center[d]*=3/a.vertices.length;d=a.indices.length/3;this.triangles=Array(d);for(b=0;b<d;++b){var f=[vec3.create(),vec3.create(),vec3.create()],e=vec3.create();for(var h=0;3>h;++h){var k=a.indices[3*b+h];for(var g=0;3>g;++g)f[h][g]=a.vertices[3*k+g],e[g]+=a.vertexNormals[3*k+g]/3}this.triangles[b]=new Triangle(f[0],
f[1],f[2],e);f=vec3.fromValues(1E20,1E20,1E20);e=vec3.fromValues(-1E20,-1E20,-1E20);h=[this.triangles[b].a,this.triangles[b].b,this.triangles[b].c];for(k=0;3>k;++k)for(g=0;3>g;++g){const l=h[k][g];l<f[g]&&(f[g]=l);l>e[g]&&(e[g]=l)}this.triangles[b].box=new AABB(f,e);this.triangles[b].color=c}this.bvh=new BoundingVolumeHierarchy(this.triangles)}intersect(a){return this.bvh.intersect(a)}}
class AABB{constructor(a,c){this.min=a.slice();this.max=c.slice()}intersect(a,c,d){for(let b=0;3>b;++b){const f=Math.max((this.min[b]-a.origin[b])/a.direction[b],(this.max[b]-a.origin[b])/a.direction[b]);c=Math.max(Math.min((this.min[b]-a.origin[b])/a.direction[b],(this.max[b]-a.origin[b])/a.direction[b]),c);d=Math.min(f,d);if(d<=c)return}return!0}}
const enclosingBox=function(a,c){const d=vec3.fromValues(Math.min(a.min[0],c.min[0]),Math.min(a.min[1],c.min[1]),Math.min(a.min[2],c.min[2]));a=vec3.fromValues(Math.max(a.max[0],c.max[0]),Math.max(a.max[1],c.max[1]),Math.max(a.max[2],c.max[2]));return new AABB(d,a)};
class BVHNode{constructor(a,c,d){const b=Math.floor(3*Math.random());var f=(h,k)=>h.box.min[b]<k.box.min[b];a=a.slice();let e=d-c;1===e?(this.left=a[c],this.right=a[c]):2===e?f(a[c],a[c+1])?(this.left=a[c],this.right=a[c+1]):(this.left=a[c+1],this.right=a[c]):(a=[...a.slice(0,c),...a.slice(c,d).sort(f),...a.slice(d,a.length)],f=Math.floor(c+e/2),this.left=new BVHNode(a,c,f),this.right=new BVHNode(a,f,d));this.box=enclosingBox(this.left.box,this.right.box)}intersect(a,c,d){if(this.box.intersect(a,
c,d)){var b=this.left.intersect(a,c,d);return this.right.intersect(a,c,b?b.t:d)||b}}}class BoundingVolumeHierarchy{constructor(a){this.root=new BVHNode(a,0,a.length)}intersect(a){return this.root.intersect(a,0,1E20)}}const setPixel=function(a,c,d,b,f,e){c=4*(a.width*d+c);a.data[c+0]=255*Math.min(b,1);a.data[c+1]=255*Math.min(f,1);a.data[c+2]=255*Math.min(e,1);a.data[c+3]=255};
class Lake{constructor(a,c,d){this.center=a;this.radius=c;this.img=document.getElementById("image-canvas");this.imgData=this.img.getContext("2d",{willReadFrequently:!0});a=document.getElementById("water-texture");this.img.width=a.width;this.img.height=a.height;this.imgData.drawImage(a,0,0);this.color=vec3.fromValues(.578,.647,.802);this.textured=d}intersect(a){var c=vec3.dot(a.direction,vec3.subtract(vec3.create(),a.origin,this.center)),d=Math.pow(vec3.distance(a.origin,this.center),2)-this.radius*
this.radius;d=c*c-d;if(!(0>d||(c=-c-Math.sqrt(d),a=vec3.scaleAndAdd(vec3.create(),a.origin,a.direction,c),1E-5>=c))){d=this.color;if(this.textured){const b=this.imgData.getImageData(this.img.width*(a[0]+125)/250,this.img.height*(a[2]+125)/200,1,1);d[0]=b.data[0]/255;d[1]=b.data[1]/255;d[2]=b.data[2]/255}return{t:c,p:a,n:vec3.normalize(vec3.create(),vec3.subtract(vec3.create(),a,this.center)),km:d}}}}
Triangle.prototype.intersect=function(a,c,d){var b=mat3.create(),f=vec3.create();for(var e=0;3>e;e++)b[e]=this.a[e]-this.c[e],b[e+3]=this.b[e]-this.c[e],b[e+6]=-a.direction[e],f[e]=a.origin[e]-this.c[e];e=mat3.create();mat3.invert(e,b);b=vec3.create();vec3.transformMat3(b,f,e);f=b[0];e=b[1];const h=1-f-e;if(!(b[2]<c||b[2]>d||0>f||1<f||0>e||1<e||0>h||1<h))return{t:b[2],n:this.normal,p:a.evaluate(b[2]),km:this.color}};
